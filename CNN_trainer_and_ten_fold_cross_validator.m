% Supplementary material to Suranga Ruhunusiri, "Identification of Plasma waves at Saturn 
% Using Convolutional Neural Networks", to be published in IEEE Transactions on Plasma Science, 2018.

% This program has been tested with MATLAB R2017a.

% The results shown in Figure 7 of the manuscript was generated by using
% this program. This was executed on a PC with a GPU (NVIDIA GeForce GTX
% 750 Ti) and the total program run time for generating the results in
% Figure 7 was 8 days.

% This program, specifically, trains CNNs and performs a 10-fold cross validation on those CNNs
% using the image datastores created by
% CNN_trainer_and_ten_fold_cross_validator.m. So, make sure to execute CNN_trainer_and_ten_fold_cross_validator.m
% program before executing this program.

% Also, specify INPUT1 and INPUT2 before executing this program.

%INPUT1: location to save trained and corss-validated CNNs
CNN_cross_validated_nets= 'C:\Cassini\CNN_TVT\cross_validated_nets\';

%INPUT2: location to save arrays containing cross-validation
%results(net_train_performance, net_cross_val_performance)
CNN_cross_validated_results= 'C:\Cassini\CNN_TVT\cross_validation_results\';

inc_select =6;
fil_len = 6;
max_pool_len=4;

net_train_performance = zeros(10,max_pool_len,inc_select,fil_len,4);
net_cross_val_performance = zeros(10,max_pool_len,inc_select,fil_len,4);

for cross_val=1:10
    
    
    if cross_val==1 
        imds_temp=shuffle(Cross_train1);
        imds_test=shuffle(Cross_val1);
    end
    
    if cross_val==2 
        imds_temp=shuffle(Cross_train2);
        imds_test=shuffle(Cross_val2);
    end
    
    if cross_val==3 
        imds_temp=shuffle(Cross_train3);
        imds_test=shuffle(Cross_val3);
    end
    
    if cross_val==4 
        imds_temp=shuffle(Cross_train4);
        imds_test=shuffle(Cross_val4);
    end
    
    if cross_val==5 
        imds_temp=shuffle(Cross_train5);
        imds_test=shuffle(Cross_val5);
    end
    
    if cross_val==6 
        imds_temp=shuffle(Cross_train6);
        imds_test=shuffle(Cross_val6);
    end
    
    if cross_val==7 
        imds_temp=shuffle(Cross_train7);
        imds_test=shuffle(Cross_val7);
    end
    
    if cross_val==8 
        imds_temp=shuffle(Cross_train8);
        imds_test=shuffle(Cross_val8);
    end
    
    if cross_val==9     
        imds_temp=shuffle(Cross_train9);
        imds_test=shuffle(Cross_val9);
    end
    
    if cross_val==10
        imds_temp=shuffle(Cross_train10);
        imds_test=shuffle(Cross_val10);
    end

    for m_pool=1:4
      
        if m_pool ==1 
            pool_len = 4;
        end
    
        if m_pool ==2 
            pool_len = 8;
        end
        if m_pool ==3 
            pool_len = 16;
        end
        if m_pool ==4 
            pool_len = 32;
        end
        if m_pool ==5 
            pool_len = 64;
        end
    
        for lay=1:inc_select
   
            for fil=1:fil_len
         
                g = gpuDevice(1);
                reset(g);

                con_lay =2^lay;
                num_fil = 2^fil;

                if (120-con_lay-pool_len) > 0
                    trainDigitData = imds_temp;
     
                    layers = [imageInputLayer([1 120 3])
                    convolution2dLayer([1,con_lay],num_fil)
                    reluLayer
                    maxPooling2dLayer([1,pool_len],'Stride',1)
                    dropoutLayer
                    fullyConnectedLayer(2)
                    softmaxLayer
          
                    classificationLayer()];
      
                    options = trainingOptions('sgdm','MaxEpochs',400, ...
                    'InitialLearnRate',0.0001,'Verbose',false);

                    convnetA = trainNetwork(trainDigitData,layers,options);

                  
                    save(strcat(CNN_cross_validated_nets,'max_p_',string(m_pool),'_con_',string(con_lay),'_fil_',string(num_fil),'_cval_',string(cross_val)),'convnetA','-v7.3');
                   

                    YTest2 = classify(convnetA, trainDigitData);
                    TTest2 =   trainDigitData.Labels;
                    TargetTr = zeros(length(TTest2),1);
                    OutputTr = zeros(length(TTest2),1);
                    wwat=find(TTest2 == 'wave');
                    wwao = find(YTest2 == 'wave');
                    TargetTr(wwat,1) = 1;
                    OutputTr(wwao,1) = 1;
                    net_train_performance(cross_val,m_pool,lay,fil,1) = length(find(TargetTr ==1 & OutputTr ==1));%*100/length(find(TargetTr ==1))
                    net_train_performance(cross_val,m_pool,lay,fil,2) = length(find(TargetTr ==1 & OutputTr ==0));%*100/length(find(TargetTr ==1)
                    net_train_performance(cross_val,m_pool,lay,fil,3) = length(find(TargetTr ==0 & OutputTr ==0));%*100/length(find(TargetTr ==0)
                    net_train_performance(cross_val,m_pool,lay,fil,4) = length(find(TargetTr ==0 & OutputTr ==1));%*100/length(find(TargetTr ==0)


                    testDigitData = imds_test;
                    convnetT = convnetA;
                    YTest2 = classify(convnetT, testDigitData);
                    TTest2 =  testDigitData.Labels;
                    Target_val = zeros(length(TTest2),1);
                    Output_val = zeros(length(TTest2),1);
                    wwat=find(TTest2 == 'wave');
                    wwao = find(YTest2 == 'wave');
                    Target_val(wwat,1) = 1;
                    Output_val(wwao,1) = 1;

                    net_cross_val_performance(cross_val,m_pool,lay,fil,1) = length(find(Target_val ==1 & Output_val ==1));
                    net_cross_val_performance(cross_val,m_pool,lay,fil,2) = length(find(Target_val ==1 & Output_val ==0));
                    net_cross_val_performance(cross_val,m_pool,lay,fil,3) = length(find(Target_val ==0 & Output_val ==0));
                    net_cross_val_performance(cross_val,m_pool,lay,fil,4) = length(find(Target_val ==0 & Output_val ==1));
                end
            end
 
            save(strcat(CNN_cross_validated_results,'Net_train_performance'),'net_train_performance','-v7.3');
            save(strcat(CNN_cross_validated_results,'Net_cross_validation_results'),'net_cross_val_performance','-v7.3');
           
        end



    end
end

clearvars -except net_train_performance net_cross_val_performance